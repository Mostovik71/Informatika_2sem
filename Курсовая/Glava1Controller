package sample;
import javafx.collections.FXCollections;
import javafx.collections.ObservableList;
import javafx.event.ActionEvent;
import javafx.fxml.FXML;
import javafx.fxml.FXMLLoader;
import javafx.scene.Node;
import javafx.scene.Parent;
import javafx.scene.Scene;
import javafx.scene.canvas.GraphicsContext;
import javafx.scene.chart.LineChart;
import javafx.scene.chart.NumberAxis;
import javafx.scene.chart.XYChart;
import javafx.scene.canvas.Canvas;
import javafx.scene.control.CheckBox;
import javafx.scene.control.ColorPicker;
import javafx.scene.layout.AnchorPane;

import java.awt.*;
import java.io.*;
import java.net.MalformedURLException;
import java.net.URL;
import java.nio.file.Files;


import javafx.collections.FXCollections;
import javafx.collections.ObservableList;
import javafx.fxml.FXML;
import javafx.scene.Node;
import javafx.scene.chart.LineChart;
import javafx.scene.chart.NumberAxis;
import javafx.scene.chart.XYChart;
import javafx.scene.control.ColorPicker;
import javafx.scene.paint.Color;

import java.io.BufferedReader;
import java.io.File;
import java.io.FileReader;
import java.io.IOException;
import java.util.Collections;
import javafx.scene.control.TextField;
import javafx.stage.Stage;

import javax.swing.*;
public class Glava1Controller {
    ObservableList<XYChart.Series<Double, Double>> lineChartData=FXCollections.observableArrayList();
    @FXML
    LineChart<Double, Double> lineChart;
    @FXML
    private TextField brushSize;

    @FXML
    private ColorPicker colorPicker;

    @FXML
    private CheckBox eraser;



    @FXML
    NumberAxis X;
    @FXML
    NumberAxis Y;
    @FXML
    AnchorPane pane;
    @FXML
   AnchorPane pane1;
    @FXML
    private Canvas canvas;
    LineChart.Series<Double, Double> series = new LineChart.Series<>();
    @FXML
    public void graph() {
        try {
            File file = new File("C:\\Users\\mosto\\Desktop\\Values.csv");

            FileReader fr = new FileReader(file);

            BufferedReader reader = new BufferedReader(fr);

            String line = reader.readLine();

            series.setName("Январь");
            while (line != null) {
                double x = Double.parseDouble(line.substring(0, 2));
                double y = Double.parseDouble(line.substring(11));
                series.getData().add(new XYChart.Data<>(x, y));
                line = reader.readLine();
            }
            lineChartData.add(series);
            lineChart.setData(lineChartData);


            Node line1 = series.getNode().lookup(".chart-series-line");

            Color color = Color.valueOf(String.valueOf(colorPicker.getValue()));

            String rgb = String.format("%d, %d, %d",
                    (int) (color.getRed() * 255),
                    (int) (color.getGreen() * 255),
                    (int) (color.getBlue() * 255));

            line1.setStyle("-fx-stroke: rgba(" + rgb + ", 1.0);");
            lineChart.setCreateSymbols(false);


        } catch (FileNotFoundException e) {
            e.printStackTrace();
        } catch (IOException e) {
            e.printStackTrace();
        }
    }
    @FXML
    public void clear(){
        series.getData().removeAll(Collections.singleton(lineChart.getData().setAll()));

    }




    @FXML
    void calculator(){
        String[] selectionValues = {"$", "€", "Руб"};
        String initialSelectionValue = null;
        String userCurrency = (String) JOptionPane.showInputDialog(null, "Какая валюта вам нужна?",
                "Обмен валют", JOptionPane.INFORMATION_MESSAGE, null, selectionValues, initialSelectionValue);
        String userData = (String) JOptionPane.showInputDialog(null, "Какую валюту предложите?",
                "Обмен валют", JOptionPane.INFORMATION_MESSAGE, null, selectionValues, initialSelectionValue);
        double course = Double.parseDouble(JOptionPane.showInputDialog("Какой курс " + userData + " относительно " + userCurrency + " ?" + "\n" + "1" + userData + " ="));
        double result = Double.parseDouble(JOptionPane.showInputDialog("Сколько " + userData + " вы собираетесь обменять?"));
        JOptionPane.showMessageDialog(null, "При конвертации " + result + userData + " в " + userCurrency + " вы получите " + (course * result) + userCurrency);
    }


    public void draw(){
        GraphicsContext gc=canvas.getGraphicsContext2D();
        canvas.setOnMouseDragged(e->
        {
            double size = Double.parseDouble(brushSize.getText());
            double x = e.getX() - size/2;
            double y = e.getY() - size/2;

            if (eraser.isSelected()){
                gc.clearRect(x,y,size,size);
            }
            else{
                gc.setFill(colorPicker.getValue());
                gc.fillRect(x,y,size,size);
            }

        });

    }



    @FXML
    void dbopen(ActionEvent actionEvent) {
        FXMLLoader loader = new FXMLLoader();
        loader.setLocation(getClass().getResource("/sample/Database.fxml"));

        try {
            loader.load();
        } catch (IOException e) {
            e.printStackTrace();
        }
        Parent root = loader.getRoot();
        Stage stage = new Stage();
        stage.setScene(new Scene(root));
        stage.show();
    }

    @FXML
    void reg(ActionEvent actionEvent) {
        FXMLLoader loader = new FXMLLoader();
        loader.setLocation(getClass().getResource("/sample/Graphic.fxml"));

        try {
            loader.load();
        } catch (IOException e) {
            e.printStackTrace();
        }
        Parent root = loader.getRoot();
        Stage stage = new Stage();
        stage.setScene(new Scene(root));
        stage.show();
    }
}



package sample;
import javafx.collections.FXCollections;
import javafx.collections.ObservableList;
import javafx.event.ActionEvent;
import javafx.fxml.FXML;
import javafx.fxml.FXMLLoader;
import javafx.scene.Node;
import javafx.scene.Parent;
import javafx.scene.Scene;
import javafx.scene.canvas.GraphicsContext;
import javafx.scene.chart.LineChart;
import javafx.scene.chart.NumberAxis;
import javafx.scene.chart.XYChart;
import javafx.scene.canvas.Canvas;
import javafx.scene.control.*;
import javafx.scene.control.Button;
import javafx.scene.control.TextField;
import javafx.scene.layout.AnchorPane;

import java.awt.*;
import java.io.*;
import java.net.MalformedURLException;
import java.net.URL;
import java.nio.file.Files;


import javafx.collections.FXCollections;
import javafx.collections.ObservableList;
import javafx.fxml.FXML;
import javafx.scene.Node;
import javafx.scene.chart.LineChart;
import javafx.scene.chart.NumberAxis;
import javafx.scene.chart.XYChart;
import javafx.scene.control.ColorPicker;
import javafx.scene.paint.Color;

import java.io.BufferedReader;
import java.io.File;
import java.io.FileReader;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Collections;

import javafx.stage.Stage;

import javax.swing.*;
public class Glava1Controller {
    @FXML
    private Button bck2;
    @FXML
    private Button bck3;
    @FXML
    LineChart<Double, Double> lineChart;
    @FXML
    private TextField brushSize;
    @FXML
    private ColorPicker colorPicker;
    @FXML
    private CheckBox eraser;
    @FXML
    NumberAxis xAxis;
    @FXML
    NumberAxis yAxis;
    @FXML
    AnchorPane pane;
    @FXML
 Canvas canvas;

void close(){

}

    public Glava1Controller() throws IOException {
    }


    public void GraphBorders(){
    xAxis.setAutoRanging(false);
    xAxis.setLowerBound(-1);
    xAxis.setUpperBound(20);
    xAxis.setTickUnit(10);
    yAxis.setAutoRanging(false);
    yAxis.setLowerBound(-100);
    yAxis.setUpperBound(100);
    yAxis.setTickUnit(10);
}
    ArrayList<Double> X = new ArrayList<>();
    ArrayList<Double> Y = new ArrayList<>();
    double x, y;



    public void initialize() throws IOException{
        File file = new File("C:\\Users\\mosto\\Desktop\\Values.csv");

        FileReader fr = new FileReader(file);

        BufferedReader reader = new BufferedReader(fr);

        String line = reader.readLine();

        while (line != null) {
            x = Double.parseDouble(line.substring(8, 10));
            y = Double.parseDouble(line.substring(11));
            X.add(x);
            Y.add(y);
            line = reader.readLine();
        }
    }

    @FXML
    ComboBox<String> comboBoxRegression;
    ObservableList<String> comboRegr = FXCollections.observableArrayList("Линейная аппроксимация","Квадратичная аппроксимация","Гиперболическая аппроксимация","Экспоненциальная аппроксимация");


    public void comboRegr() {
        comboBoxRegression.setItems(comboRegr);
    }
    public void buildRegr() throws IOException {
        if (comboBoxRegression.getValue()=="Линейная аппроксимация") {
linear();
        }

            if (comboBoxRegression.getValue()=="Квадратичная аппроксимация") {
               sqr();
            }
        if (comboBoxRegression.getValue()=="Гиперболическая аппроксимация") {
            hyp();
        }
        if (comboBoxRegression.getValue()=="Экспоненциальная аппроксимация") {
            exp();
        }

    }
    @FXML
    public void linear() throws IOException {
        GraphBorders();
    XYChart.Series series = new XYChart.Series();

        double sum_x = 0, sum_y = 0, sum_xx = 0, sum_xy = 0, sum_yy = 0;
        //add();

        for (int i = 0; i < X.size(); i++) {
            sum_x += X.get(i);
        sum_y += X.get(i);
        sum_xx += X.get(i) * X.get(i);
        sum_xy += X.get(i) * Y.get(i);
        sum_yy += Y.get(i) * Y.get(i);
    }
        double a, b;
        b = (sum_xy * sum_x - sum_y * sum_xx) / (sum_x * sum_x - X.size() * sum_xx);
        a = (sum_y - X.size() * b) / sum_x;
        System.out.println("a=" + a);
        System.out.println("b=" + b);
        for (int i = 0; i < X.size(); i++) {
            double y = a *X.get(i) +b;
            series.getData().add(new XYChart.Data<>(X.get(i), y));
        }

        series.setName("Линейная аппроксимация");
        lineChart.getData().add(series);
        lineChart.setCreateSymbols(false);
    }

    @FXML
    public void sqr() throws IOException {
        GraphBorders();
        XYChart.Series series = new XYChart.Series();
        double sum_y = 0;
        double sum_xy = 0;
        double sum_x2y = 0;
        double sum_x = 0;
        double sum_x_2 = 0;
        double sum_x_3 = 0;
        double sum_x_4 = 0;
        //add();
        for (int i = 0; i < Y.size(); i++) {
            sum_y += Y.get(i);
            sum_xy += Y.get(i) * i;
            sum_x2y += Y.get(i) * i * i;
            sum_x += i;
            sum_x_2 += i * i;
            sum_x_3 += i * i * i;
            sum_x_4 += i * i * i * i;
        }
        double det = Y.size() * sum_x_2 * sum_x_4 + sum_x_3 * sum_x * sum_x_2 + sum_x_3 * sum_x * sum_x_2
                - sum_x_2 * sum_x_2 * sum_x_2 - sum_x_3 * sum_x_3 * Y.size() - sum_x_4 * sum_x * sum_x;
        double det1 = Y.size() * sum_x_2 * sum_x2y + sum_y * sum_x * sum_x_3 + sum_xy * sum_x * sum_x_2
                - sum_y * sum_x_2 * sum_x_2 - sum_x_3 * Y.size() * sum_xy - sum_x2y * sum_x * sum_x;
        double det2 = Y.size() * sum_xy * sum_x_4 + sum_x2y * sum_x * sum_x_2 + sum_x_3 * sum_y * sum_x_2
                - sum_x_2 * sum_x_2 * sum_xy - sum_x_3 * sum_x2y * Y.size() - sum_x_4 * sum_y * sum_x;
        double det3 = sum_y * sum_x_2 * sum_x_4 + sum_x_3 * sum_xy * sum_x_2 + sum_x_3 * sum_x * sum_x2y
                - sum_x_2 * sum_x_2 * sum_x2y - sum_x_3 * sum_x_3 * sum_y - sum_x_4 * sum_x * sum_xy;
        double a = det1 / det;
        double b = det2 / det;
        double c = det3 / det;
        System.out.println("a=" + a);
        System.out.println("b=" + b);
        System.out.println("c=" + c);
        for (int i = 0; i < X.size(); i++) {
            double y = a *X.get(i) *X.get(i) + b * X.get(i) + c;

            series.getData().add(new XYChart.Data<>(X.get(i), y));
        }
        series.setName("Квадратичная аппроксимация");
        lineChart.getData().add(series);
        lineChart.setCreateSymbols(false);
    }

    @FXML
    public void exp() throws IOException {
        GraphBorders();
        XYChart.Series series = new XYChart.Series();
        double sum_lny = 0;
        double  sum_lny_x=0;
        double sum_x2 = 0;
        double sum_x = 0;

       // add();
        for (int i = 1; i < Y.size(); i++) {
            sum_lny += Math.log(Y.get(i));
            sum_x2 += i * i;
            sum_x += i;
            sum_lny_x += Math.log(Y.get(i)) * i;
        }

        double a = (sum_lny * sum_x2 - sum_lny_x*sum_x) / (Y.size() * sum_x2- sum_x*sum_x);
        double b = (Y.size() * sum_lny_x - sum_lny * sum_x) / (Y.size() * sum_x2- sum_x*sum_x);
        System.out.println("a=" + a);
        System.out.println("b=" + b);

        for (int i = 0; i < X.size(); i++) {
            double y = Math.exp(a) * Math.exp(b*X.get(i));
            series.getData().add(new XYChart.Data<>(X.get(i), y));
        }
        series.setName("Экспоненциальная аппроксимация");
        lineChart.getData().add(series);
        lineChart.setCreateSymbols(false);
    }


    @FXML
    public void hyp() throws IOException {
        GraphBorders();
        XYChart.Series series = new XYChart.Series();
        double sum_y_x = 0;
        double sum_1_x = 0;
        double sum_y = 0;
        double sum_1_x2 = 0;
       // add();
        for (int i = 0; i < Y.size(); i++) {
            if (i != 0) {
                sum_1_x += 1 / (i);
                sum_1_x2 += 1 / ((i) * (i));
                sum_y_x += Y.get(i) / (i);
            }
            sum_y += Y.get(i);
        }
        double b = (Y.size() * sum_y_x - sum_1_x * sum_y) / (Y.size() * sum_1_x2 - sum_1_x * sum_1_x);
        double a = sum_y / Y.size() - b * sum_1_x / Y.size();
        System.out.println("a=" + a);
        System.out.println("b=" + b);
        for (int i = 0; i < X.size(); i++) {
            double y = a+b/X.get(i);
            series.getData().add(new XYChart.Data<>(X.get(i), y));
        }
        series.setName("Гиперболическая аппроксимация");
        lineChart.getData().add(series);
        lineChart.setCreateSymbols(false);

    }
@FXML
    public void monthGraph() throws IOException {
    GraphBorders();
    XYChart.Series series = new XYChart.Series();
    series.setName("График");
   // add();
    for (int i = 0; i < X.size(); i++) {
        series.getData().add(new XYChart.Data<>(X.get(i), Y.get(i)));
    }
    lineChart.getData().add(series);
    Node line1 = series.getNode().lookup(".chart-series-line");
    Color color = Color.valueOf(String.valueOf(colorPicker.getValue()));
    String rgb = String.format("%d, %d, %d",
            (int) (color.getRed() * 255),
            (int) (color.getGreen() * 255),
            (int) (color.getBlue() * 255));
    line1.setStyle("-fx-stroke: rgba(" + rgb + ", 1.0);");
    lineChart.setCreateSymbols(false);
    }

    @FXML
    public void clear(){
        XYChart.Series series = new XYChart.Series();
        series.getData().removeAll(Collections.singleton(lineChart.getData().setAll()));


    }


    @FXML
    void calculator(){
        String[] selectionValues = {"$", "€", "Руб"};
        String initialSelectionValue = null;
        String userCurrency = (String) JOptionPane.showInputDialog(null, "Какая валюта вам нужна?",
                "Обмен валют", JOptionPane.INFORMATION_MESSAGE, null, selectionValues, initialSelectionValue);
        String userData = (String) JOptionPane.showInputDialog(null, "Какую валюту предложите?",
                "Обмен валют", JOptionPane.INFORMATION_MESSAGE, null, selectionValues, initialSelectionValue);
        double course = Double.parseDouble(JOptionPane.showInputDialog("Какой курс " + userData + " относительно " + userCurrency + " ?" + "\n" + "1" + userData + " ="));
        double result = Double.parseDouble(JOptionPane.showInputDialog("Сколько " + userData + " вы собираетесь обменять?"));
        JOptionPane.showMessageDialog(null, "При конвертации " + result + userData + " в " + userCurrency + " вы получите " + (course * result) + userCurrency);
    }

    public void draw(){
        GraphicsContext gc=canvas.getGraphicsContext2D();
        canvas.setOnMouseDragged(e->
        {
            double size = Double.parseDouble(brushSize.getText());
            double x = e.getX() - size/2;
            double y = e.getY() - size/2;

            if (eraser.isSelected()){
                gc.clearRect(x,y,size,size);
            }
            else{
                gc.setFill(colorPicker.getValue());
                gc.fillRect(x,y,size,size);
            }
        });

    }
    @FXML
    void dbopen(ActionEvent actionEvent) {
        FXMLLoader loader = new FXMLLoader();
        loader.setLocation(getClass().getResource("/sample/Database.fxml"));

        try {
            loader.load();
        } catch (IOException e) {
            e.printStackTrace();
        }
        Parent root = loader.getRoot();
        Stage stage = new Stage();
        stage.setScene(new Scene(root));
        stage.show();
    }

    @FXML
    void reg(ActionEvent actionEvent) {
        FXMLLoader loader = new FXMLLoader();
        loader.setLocation(getClass().getResource("/sample/Graphic.fxml"));

        try {
            loader.load();
        } catch (IOException e) {
            e.printStackTrace();
        }
        Parent root = loader.getRoot();
        Stage stage = new Stage();
        stage.setScene(new Scene(root));
        stage.show();
    }

    @FXML
    void back2(ActionEvent actionEvent) {
        Stage menustage = (Stage) bck2.getScene().getWindow();
        menustage.close();
    }

    @FXML
    void back3(ActionEvent actionEvent) {
        Stage menustage = (Stage) bck3.getScene().getWindow();
        menustage.close();
    }

}








